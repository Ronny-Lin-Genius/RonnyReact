{"ast":null,"code":"var _jsxFileName = \"/Users/jdwx/Desktop/Web Practice/React/react1/src/App.js\";\nimport React, { useState } from 'react';\nimport Input from './Input';\n\nfunction convert(temperature, unit) {\n  const temp = parseFloat(temperature);\n\n  if (Number.isNaN(temp)) {\n    return \"\";\n  }\n\n  const realtemp = unit == \"c\" ? temp * 9 / 5 + 32 : (temp - 32) * 5 / 9;\n  return realtemp.toString(); // const c = (temperature - 32) * 5/9;\n  // const f = temperature * 9/5 + 32;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsisChange = this.handleCelsisChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {\n      temperature: \"1022\",\n      unit: \"f\"\n    };\n  }\n\n  handleCelsisChange(temperature) {\n    this.setState({\n      temperature,\n      unit: \"c\"\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      temperature,\n      unit: \"f\"\n    });\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const unit = this.state.unit;\n    let celsius;\n    let fahreheit;\n\n    if (unit === \"c\") {\n      celsius = temperature;\n      fahreheit = convert(temperature, unit);\n    } else if (unit === \"f\") {\n      celsius = convert(temperature, unit);\n      fahreheit = temperature;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      temperature: celsius,\n      unit: \"c\",\n      onTemChange: this.handleCelsisChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      temperature: fahreheit,\n      unit: \"f\",\n      onTemChange: this.handleFahrenheitChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, celsius > 100 ? \"the water boil\" : \"the water not boil\"));\n  }\n\n}\n\nexport default App; //function BoilingVerdict(props) {\n//   console.log(props);\n//   // if (props.temperature >= 100) {\n//   //   return <p>The water would boil.</p>\n//   // }\n//   // console.log(\"aha2\");\n//   return <p>no boil</p>\n// }\n// function App() {\n//   const [temperature, setTemperature] = useState();\n//   function handleChange(e){\n//     setTemperature(temperature => {\n//        temperature = e.target.value; \n//     });\n//     console.log(\"d\")\n//   };\n//   return (\n//     <div className=\"App\">\n//       <fieldset>\n//         <legend>Enter temperature in Celsius</legend>\n//         <input value={temperature} onChange={handleChange}/>\n//         <BoilingVerdict temperature={temperature}/>\n//       </fieldset>\n//       <Input/>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/jdwx/Desktop/Web Practice/React/react1/src/App.js"],"names":["React","useState","Input","convert","temperature","unit","temp","parseFloat","Number","isNaN","realtemp","toString","App","Component","constructor","props","handleCelsisChange","bind","handleFahrenheitChange","state","setState","render","celsius","fahreheit"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,OAAT,CAAiBC,WAAjB,EAA8BC,IAA9B,EAAmC;AACjC,QAAMC,IAAI,GAAGC,UAAU,CAACH,WAAD,CAAvB;;AACA,MAAGI,MAAM,CAACC,KAAP,CAAaH,IAAb,CAAH,EAAsB;AACpB,WAAO,EAAP;AACD;;AACD,QAAMI,QAAQ,GAAIL,IAAI,IAAI,GAAT,GAAgBC,IAAI,GAAG,CAAP,GAAS,CAAT,GAAa,EAA7B,GAAkC,CAACA,IAAI,GAAG,EAAR,IAAc,CAAd,GAAgB,CAAnE;AACA,SAAOI,QAAQ,CAACC,QAAT,EAAP,CANiC,CAOjC;AACA;AACD;;AAGD,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKE,KAAL,GAAa;AAACf,MAAAA,WAAW,EAAE,MAAd;AAAsBC,MAAAA,IAAI,EAAE;AAA5B,KAAb;AACD;;AAEDW,EAAAA,kBAAkB,CAACZ,WAAD,EAAa;AAC7B,SAAKgB,QAAL,CAAc;AAAChB,MAAAA,WAAD;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAAd;AACD;;AACDa,EAAAA,sBAAsB,CAACd,WAAD,EAAa;AACjC,SAAKgB,QAAL,CAAc;AAAChB,MAAAA,WAAD;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAAd;AACD;;AAEDgB,EAAAA,MAAM,GAAE;AACN,UAAMjB,WAAW,GAAG,KAAKe,KAAL,CAAWf,WAA/B;AACA,UAAMC,IAAI,GAAG,KAAKc,KAAL,CAAWd,IAAxB;AACA,QAAIiB,OAAJ;AACA,QAAIC,SAAJ;;AACA,QAAIlB,IAAI,KAAK,GAAb,EAAiB;AACjBiB,MAAAA,OAAO,GAAGlB,WAAV;AACAmB,MAAAA,SAAS,GAAGpB,OAAO,CAACC,WAAD,EAAcC,IAAd,CAAnB;AACA,KAHA,MAGM,IAAIA,IAAI,KAAK,GAAb,EAAkB;AACvBiB,MAAAA,OAAO,GAAGnB,OAAO,CAACC,WAAD,EAAcC,IAAd,CAAjB;AACAkB,MAAAA,SAAS,GAAGnB,WAAZ;AACD;;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAEkB,OAApB;AAA6B,MAAA,IAAI,EAAE,GAAnC;AAAwC,MAAA,WAAW,EAAE,KAAKN,kBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAEO,SAApB;AAA+B,MAAA,IAAI,EAAE,GAArC;AAA0C,MAAA,WAAW,EAAE,KAAKL,sBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACII,OAAO,GAAG,GAAX,GAAkB,gBAAlB,GAAqC,oBADxC,CAHF,CADF;AASD;;AApC8B;;AAwCjC,eAAeV,GAAf,C,CAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, {useState} from 'react';\nimport Input from './Input';\n\nfunction convert(temperature, unit){\n  const temp = parseFloat(temperature);\n  if(Number.isNaN(temp)){\n    return \"\";\n  }\n  const realtemp = (unit == \"c\") ? temp * 9/5 + 32 : (temp - 32) * 5/9;\n  return realtemp.toString();\n  // const c = (temperature - 32) * 5/9;\n  // const f = temperature * 9/5 + 32;\n}\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleCelsisChange = this.handleCelsisChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: \"1022\", unit: \"f\"}\n  }\n\n  handleCelsisChange(temperature){\n    this.setState({temperature, unit: \"c\"});\n  }\n  handleFahrenheitChange(temperature){\n    this.setState({temperature, unit: \"f\"})\n  }\n\n  render(){\n    const temperature = this.state.temperature;\n    const unit = this.state.unit;\n    let celsius;\n    let fahreheit;\n    if (unit === \"c\"){\n    celsius = temperature;\n    fahreheit = convert(temperature, unit);\n   } else if (unit === \"f\") {\n     celsius = convert(temperature, unit);\n     fahreheit = temperature;\n   }\n    return(\n      <div>\n        <Input temperature={celsius} unit={\"c\"} onTemChange={this.handleCelsisChange}/>\n        <Input temperature={fahreheit} unit={\"f\"} onTemChange={this.handleFahrenheitChange}/>\n        <div>\n          {(celsius > 100) ? \"the water boil\" : \"the water not boil\"}\n        </div>\n      </div>\n      );\n  }\n\n}\n\nexport default App;\n\n//function BoilingVerdict(props) {\n  //   console.log(props);\n  //   // if (props.temperature >= 100) {\n  //   //   return <p>The water would boil.</p>\n  //   // }\n  //   // console.log(\"aha2\");\n  //   return <p>no boil</p>\n  // }\n  \n  // function App() {\n  \n  //   const [temperature, setTemperature] = useState();\n  \n  //   function handleChange(e){\n  //     setTemperature(temperature => {\n  //        temperature = e.target.value; \n  //     });\n  //     console.log(\"d\")\n  //   };\n  \n  \n  \n  //   return (\n  //     <div className=\"App\">\n  //       <fieldset>\n  //         <legend>Enter temperature in Celsius</legend>\n  //         <input value={temperature} onChange={handleChange}/>\n  //         <BoilingVerdict temperature={temperature}/>\n  //       </fieldset>\n  //       <Input/>\n  \n  //     </div>\n  //   );\n  // }"]},"metadata":{},"sourceType":"module"}